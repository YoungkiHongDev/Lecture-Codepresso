# 자바 언어 탄생
제임스 고슬링이 다양한 기기에서 동작하는 언어 개발을 목표로 그린 프로젝트를 진행함
선 마이크로시스템즈에서 자바 1.0 버전을 공식으로 발표하였고 현재까지 계속 새로운 버전이 나오고 있음


# 자바 언어 특징
1. WORA - Write Once Run Anywhere
Java 이전의 C언어 등은 하드웨어에 의존적이라 다른 하드웨어에서 쓰려면 재 컴파일 필요하다.
하지만 자바는 한번만 작성하고 컴파일하면 결과물이 어디서든 동작이 가능한데 이것은 JVM이 핵심 역할을 한다.

2. 객체 지향 언어
자바는 클래스를 기본 단위로 구성하여 상속, 다형성, 캡슐화 등 객체지향적 요소를 지원한다.

3. 자동화 된 메모리 관리
메모리 자원은 한정적이므로 효율적인 관리가 필수적이다.
C언어 같은 경우 메모리 관리를 개발자가 직접 해줘야 한다.
하지만 자바는 JVM의 Garbage Collector가 사용한 메모리 자원을 알아서 회수하므로 개발자가 신경 쓸 필요가 없다.


# 자바 언어 분야
안드로이드, 스프링, 하둡, 엘라스틱서치 등에서 사용된다.
모바일, 웹, 빅데이터, 데이터베이스, 데스크탑앱, 머신러닝, 게임, 임베디드 등 다양한 분야에서 쓸 수 있다.
하지만 가장 많이 쓰는 분야는 안드로이드, 스프링을 사용하는 모바일과 웹 분야이다.


# 소스코드의 실행 과정
1. 개발자가 소스코드 작성한다.
2. 컴파일 과정을 거친다.
3. 프로그램 결과물을 산출한다.
4. 하드웨어에서 실행시킨다.


# C언어의 컴파일
코드를 작성하고 컴파일한 결과물을 윈도우에서 실행할 수 있다면 리눅스에서는 실행할 수 없다.
리눅스에서 실행하기 위해서는 컴파일부터 리눅스 전용으로 다시 해야한다.


# Bytecode
자바 코드를 빌드하면 생성되는 중간코드로서 어셈블리어와 유사하다.


# JVM
자바 가상 머신으로 바이트코드를 실행한다.
WORA 구현의 핵심 역할을 하며, OS/HW 독립적으로 바이트코드를 실행할 수 있다.
따라서 JVM은 바이트코드와 OS/HW 사이의 번역기와 같은 역할을 한다.


# 자바 과정
자바 코드를 컴파일하면 결과물로 바이트코드가 산출된다.
이것을 JVM에서 윈도우/리눅스 어디서든 실행이 가능하다.
단, 운영체제에 맞는 JVM이 필요하다.


# JRE
JRE = JVM + 자바 애플리케이션을 실행하기위한 라이브러리


# JDK
JDK = JRE + 자바 개발 도구